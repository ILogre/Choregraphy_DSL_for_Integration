// automatically generated by Xtext
grammar com.chor4integration.textdsl.Chor4IntTxtDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/com.chor4integration.chormetamodel/model/chormetamodel.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/com.chor4integration.servicesmetamodel/model/servicesmetamodel.ecore" as servicesmetamodel

Choreography returns Choreography:
	{Choreography}
	'Choreography'
	'{'
		('flowElements' '{' flowElements+=FlowElement ( "," flowElements+=FlowElement)* '}' )?
		('roles' '{' roles+=Role ( "," roles+=Role)* '}' )?
	'}';

FlowElement returns FlowElement:
	SequenceFlow | ExclusiveGateway | ParallelGateway | StartEvent | EndEvent | AtomicInteraction;


Actor returns servicesmetamodel::Actor:
	Service | User;

FlowNode returns FlowNode:
	ExclusiveGateway | ParallelGateway | StartEvent | EndEvent | AtomicInteraction;





Role returns Role:
	{Role}
	'Role'
	name=EString
	'{'
		('actor' actor=[servicesmetamodel::Actor|EString])?
	'}';

EString returns ecore::EString:
	STRING | ID;

SequenceFlow returns SequenceFlow:
	'SequenceFlow'
	name=EString
	'{'
		'target' target=[FlowNode|EString]
		'source' source=[FlowNode|EString]
	'}';

ExclusiveGateway returns ExclusiveGateway:
	{ExclusiveGateway}
	'ExclusiveGateway'
	name=EString
	'{'
		('incomings' '(' incomings+=[SequenceFlow|EString] ( "," incomings+=[SequenceFlow|EString])* ')' )?
		('outgoings' '(' outgoings+=[SequenceFlow|EString] ( "," outgoings+=[SequenceFlow|EString])* ')' )?
	'}';

ParallelGateway returns ParallelGateway:
	{ParallelGateway}
	'ParallelGateway'
	name=EString
	'{'
		('incomings' '(' incomings+=[SequenceFlow|EString] ( "," incomings+=[SequenceFlow|EString])* ')' )?
		('outgoings' '(' outgoings+=[SequenceFlow|EString] ( "," outgoings+=[SequenceFlow|EString])* ')' )?
	'}';

StartEvent returns StartEvent:
	{StartEvent}
	'StartEvent'
	name=EString
	'{'
		('incomings' '(' incomings+=[SequenceFlow|EString] ( "," incomings+=[SequenceFlow|EString])* ')' )?
		('outgoings' '(' outgoings+=[SequenceFlow|EString] ( "," outgoings+=[SequenceFlow|EString])* ')' )?
	'}';

EndEvent returns EndEvent:
	{EndEvent}
	'EndEvent'
	name=EString
	'{'
		('incomings' '(' incomings+=[SequenceFlow|EString] ( "," incomings+=[SequenceFlow|EString])* ')' )?
		('outgoings' '(' outgoings+=[SequenceFlow|EString] ( "," outgoings+=[SequenceFlow|EString])* ')' )?
	'}';

AtomicInteraction returns AtomicInteraction:
	'AtomicInteraction'
	name=EString
	'{'
		('incomings' '(' incomings+=[SequenceFlow|EString] ( "," incomings+=[SequenceFlow|EString])* ')' )?
		('outgoings' '(' outgoings+=[SequenceFlow|EString] ( "," outgoings+=[SequenceFlow|EString])* ')' )?
		'sender' sender=[Role|EString]
		'receiver' receiver=[Role|EString]
		('targetOperation' targetOperation=[servicesmetamodel::Operation|EString])?
	'}';

Operation returns servicesmetamodel::Operation:
	'Operation'
	name=EString
	'{'
		'sideEffect' sideEffect=EBoolean
		'invokingMsg' invokingMsg=[servicesmetamodel::Message|EString]
		('answeringMsg' answeringMsg=[servicesmetamodel::Message|EString])?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Message returns servicesmetamodel::Message:
	{servicesmetamodel::Message}
	'Message'
	'{'
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	'}';

Parameter returns servicesmetamodel::Parameter:
	{servicesmetamodel::Parameter}
	'Parameter'
	'{'
		('type' type=EJavaObject)?
	'}';

EJavaObject returns ecore::EJavaObject:
	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

Service returns servicesmetamodel::Service:
	{servicesmetamodel::Service}
	'Service'
	name=EString
	'{'
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

User returns servicesmetamodel::User:
	{servicesmetamodel::User}
	'User'
	name=EString;
